---
# Source: external-secrets/templates/rolebinding-external-secrets.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rolebinding-devops-externalsecret
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: external-secrets
  namespace: devsecops-ci
---
# Source: external-secrets/templates/policy-git-secret.yaml
# The policy needs to be added to the ACM HUB and then it will be pushed on all clusters
# except the HUB (see placementrule on the bottom)
---
# Source: external-secrets/templates/policy-quayio-registry-secret.yaml
# The policy needs to be added to the ACM HUB and then it will be pushed on all clusters
# except the HUB (see placementrule on the bottom)
---
# Source: external-secrets/templates/policy-reports-nginx-secret.yaml
# The policy needs to be added to the ACM HUB and then it will be pushed on all clusters
# except the HUB (see placementrule on the bottom)
---
# Source: external-secrets/templates/eso-reports-htpasswd.yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: reports-nginx-externalsecret
  namespace: devsecops-ci
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: reports-nginx-htpasswd
    template:
      metadata:
      type: Opaque
  dataFrom:
  - extract:
      key: secret/data/hub/devsecops
---
# Source: external-secrets/templates/git-secret.yaml
---
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: git-secret
  namespace: devsecops-ci
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: git-secret
    template:
      metadata:
        annotations:
          # Tekton magic, see https://tekton.dev/vault/pipelines-v0.15.2/auth/
          tekton.dev/git-0: https://github.com/PLAINTEXT
      type: kubernetes.io/basic-auth
  dataFrom:
  - extract:
      key: secret/data/hub/git
---
# Source: external-secrets/templates/image-registry-credentials.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  # This is the external image registry (e.g. quay.io/docker)
  name: image-registry-credentials
  namespace: devsecops-ci
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: image-registry-credentials
    template:
  dataFrom:
  - extract:
      key: secret/data/hub/imageregistry
---
# Source: external-secrets/templates/policy-git-secret.yaml
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: git-secret-placement-binding
  namespace: devsecops-ci
placementRef:
  name: git-secret-placement
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
  - name: policy-git-secret
    kind: Policy
    apiGroup: policy.open-cluster-management.io
---
# Source: external-secrets/templates/policy-quayio-registry-secret.yaml
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: quayio-secret-placement-binding
  namespace: devsecops-ci
placementRef:
  name: quayio-secret-placement
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
  - name: policy-quayio-registry-secret
    kind: Policy
    apiGroup: policy.open-cluster-management.io
---
# Source: external-secrets/templates/policy-reports-nginx-secret.yaml
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: reports-nginx-secret-placement-binding
  namespace: devsecops-ci
placementRef:
  name: reports-nginx-secret-placement
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
  - name: policy-reports-nginx-secret
    kind: Policy
    apiGroup: policy.open-cluster-management.io
---
# Source: external-secrets/templates/policy-git-secret.yaml
# We need to run this on any managed cluster but not on the HUB
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: git-secret-placement
  namespace: devsecops-ci
spec:
  # This will go to both devel and secured clusters
  clusterSelector:
    # Using matchExpression because I need it in more than one clusterGroup/cluster-group
    matchExpressions:
      - key: clusterGroup
        operator: In
        values:
          - devel
          - prod
  clusterConditions:
    - status: 'True'
      type: ManagedClusterConditionAvailable
---
# Source: external-secrets/templates/policy-quayio-registry-secret.yaml
# We need to run this on any managed cluster but not on the HUB
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: quayio-secret-placement
  namespace: devsecops-ci
spec:
  # This will go to both devel and secured clusters
  clusterSelector:
    # Using matchExpression because I need it in more than one clusterGroup
    matchExpressions:
      - key: clusterGroup
        operator: In
        values:
          - devel
  clusterConditions:
    - status: 'True'
      type: ManagedClusterConditionAvailable
---
# Source: external-secrets/templates/policy-reports-nginx-secret.yaml
# We need to run this on any managed cluster but not on the HUB
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: reports-nginx-secret-placement
  namespace: devsecops-ci
spec:
  # This will go to both devel and secured clusters
  clusterSelector:
    # Using matchExpression because I need it in more than one clusterGroup/cluster-group
    matchExpressions:
      - key: clusterGroup
        operator: In
        values:
          - devel
  clusterConditions:
    - status: 'True'
      type: ManagedClusterConditionAvailable
---
# Source: external-secrets/templates/policy-git-secret.yaml
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-git-secret
  namespace: devsecops-ci
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    argocd.argoproj.io/sync-options: SkipPrune
    argocd.argoproj.io/sync-wave: "15"
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: git-secret-configpolicy
          annotations:
            apps.open-cluster-management.io/deployables: "secret"
        spec:
          remediationAction: enforce
          severity: medium
          namespaceSelector:
            include:
              - default
              - devsecops-ci
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: Secret
                type: Opaque
                metadata:
                  name: git-secret
                  namespace: devsecops-ci
                apiVersion: v1
                data:
                  username: '{{hub fromSecret "devsecops-ci" "git-secret" "username" hub}}'
                  password: '{{hub fromSecret "devsecops-ci" "git-secret" "password" hub}}'
---
# Source: external-secrets/templates/policy-quayio-registry-secret.yaml
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-quayio-registry-secret
  namespace: devsecops-ci
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    argocd.argoproj.io/sync-options: SkipPrune
    argocd.argoproj.io/sync-wave: "7"
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: quayio-secret-configpolicy
          annotations:
            apps.open-cluster-management.io/deployables: "secret"
        spec:
          remediationAction: enforce
          severity: medium
          namespaceSelector:
            include:
              - default
          object-templates:
            - complianceType: mustonlyhave
              objectDefinition:
                kind: Secret
                type: Opaque
                metadata:
                  name: image-registry-credentials
                  namespace: devsecops-ci
                  annotations:
                    # Tekton magic, see https://tekton.dev/vault/pipelines-v0.15.2/auth/
                    tekton.dev/docker-0: https://quay.io
                apiVersion: v1
                data:
                  username: '{{hub fromSecret "devsecops-ci" "image-registry-credentials" "username" hub}}'
                  password: '{{hub fromSecret "devsecops-ci" "image-registry-credentials" "password" hub}}'
---
# Source: external-secrets/templates/policy-reports-nginx-secret.yaml
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-reports-nginx-secret
  namespace: devsecops-ci
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    argocd.argoproj.io/sync-options: SkipPrune
    argocd.argoproj.io/sync-wave: "15"
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: reports-nginx-secret-policy
          annotations:
            apps.open-cluster-management.io/deployables: "secret"
        spec:
          remediationAction: enforce
          severity: medium
          namespaceSelector:
            include:
              - default
              - devsecops-ci
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: Secret
                type: Opaque
                metadata:
                  name: reports-nginx-htpasswd
                  namespace: devsecops-ci
                apiVersion: v1
                data: 
                  htpasswd: '{{hub fromSecret "devsecops-ci" "reports-nginx-htpasswd" "htpasswd" hub}}'
