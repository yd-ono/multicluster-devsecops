---
# Source: pipelines/templates/app-pipeline/rbac/registry-credential-sa.yaml
apiVersion: v1
kind: ServiceAccount
imagePullSecrets:
- name: image-registry-credentials
metadata:
  name: pipeline-svc
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
secrets:
  - name: quay-api-token
  - name: acs-api-token
  - name: quay-pull-secret
---
# Source: pipelines/templates/chains/tekton-chains-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chains-config
  namespace: openshift-pipelines
data:
  artifacts.oci.storage: ''
  artifacts.taskrun.format: tekton
  artifacts.taskrun.storage: tekton
---
# Source: pipelines/templates/environment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: environment
data:
  DESCRIPTION: "Config keys for openshift-pipelines"
---
# Source: pipelines/templates/app-pipeline/pvcs/containers-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: containers-pvc
  namespace: devsecops-ci
spec:
  resources:
    requests:
      storage: 5Gi
  storageClassName: gp2
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
---
# Source: pipelines/templates/app-pipeline/pvcs/pipeline-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pipeline-pvc
  namespace: devsecops-ci
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
spec:
  resources:
    requests:
      storage: 5Gi
  storageClassName: gp2
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
---
# Source: pipelines/templates/app-pipeline/rbac/imagestream-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: imagestream-view
rules:
- apiGroups:
  - image.openshift.io
  resources:
  - imagestreams
  verbs:
  - get
- apiGroups:
  - image.openshift.io
  resources:
  - imagestreamimports
  verbs:
  - create
---
# Source: pipelines/templates/app-pipeline/pipelines/build-and-deploy.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-and-deploy
  namespace: AUTOMATED
spec:
  params:
    - name: github-repo-revision
      type: string
      description: Git branch
      default: main
    - name: github-repo-url
      type: string
      description: Github repo
      default: AUTOMATED
    - name: context-dir
      type: string
      default: '/'
    - name: image-root
      type: string
      default: 'quay-registry-quay-quay-enterprise./devel'
    - name: is-name
      type: string
      default: chat-client
  workspaces:
    - name: source
  tasks:
  - name: clone-sources
    taskRef:
      name: git-clone
      kind: ClusterTask
    params:
      - name: url
        value: '$(params.github-repo-url)'
      - name: revision
        value: '$(params.github-repo-revision)'
      - name: deleteExisting
        value: 'true'
    workspaces:
      - name: output
        workspace: source
  - name: build-from-source
    taskRef:
      name: react-build
    runAfter:
    - clone-sources
    workspaces:
      - name: output
        workspace: source
  - name: build-image
    taskRef: 
      name: buildah-to-registry
    params:
      - name: IMAGE
        value: '$(params.image-root)/$(params.is-name):$(params.github-repo-revision)'
      - name: CONTEXT
        value: '.'
      - name: TLSVERIFY
        value: 'false'
    workspaces:
      - name: source
        workspace: source
    runAfter: 
      - build-from-source
  - name: rollout-latest-image
    taskRef: 
      name: openshift-client
      kind: ClusterTask
    params:
      - name: SCRIPT
        value: oc import-image --insecure=true $(params.is-name):latest --from=$(params.image-root)/$(params.is-name):$(params.github-repo-revision) --confirm
    runAfter:
      - build-image
---
# Source: pipelines/templates/app-pipeline/pipelines/build-and-sign.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-and-sign
  namespace: AUTOMATED
spec:
  params:
    - name: github-repo-revision
      type: string
      description: Git branch
      default: main
    - name: github-repo-url
      type: string
      description: Github repo
      default: AUTOMATED
    - name: context-dir
      type: string
      default: '/'
    - name: is-name
      type: string
      default: chat-client
  workspaces:
    - name: source
  tasks:
  - name: clone-sources
    taskRef:
      name: git-clone
      kind: ClusterTask
    params:
      - name: url
        value: '$(params.github-repo-url)'
      - name: revision
        value: '$(params.github-repo-revision)'
      - name: deleteExisting
        value: 'true'
    workspaces:
      - name: output
        workspace: source
  - name: build-from-source
    taskRef: 
      name: react-build
    runAfter: 
    - clone-sources
    workspaces:
      - name: output
        workspace: source
  - name: build-image
    taskRef: 
      name: buildah-to-registry
    params:
      - name: IMAGE
        value: 'quay-registry-quay-quay-enterprise./devel/$(params.is-name):$(params.github-repo-revision)'
      - name: CONTEXT
        value: '.'
      - name: TLSVERIFY
        value: 'false'
    workspaces:
      - name: source
        workspace: source
    runAfter: 
      - build-from-source
---
# Source: pipelines/templates/app-pipeline/pipelines/build-scan-and-deploy.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-scan-and-deploy
  namespace: AUTOMATED
spec:
  params:
    - name: github-repo-revision
      type: string
      description: Git branch
      default: main
    - name: github-repo-url
      type: string
      description: Github repo
      default: AUTOMATED
    - name: context-dir
      type: string
      default : '/'
    - name: image-root
      type: string
      default: 'quay-registry-quay-quay-enterprise./devel'
    - name: is-name
      type: string
      default: chat-client
    - name: acs-image
      type: string
      default: 'AUTOMATED'
    - name: acs-scan-api
      type: string
      default: 'https://central-stackrox.'
  workspaces:
    - name: source
  tasks:
  - name: clone-sources
    taskRef:
      name: git-clone
      kind: ClusterTask
    params:
      - name: url
        value: '$(params.github-repo-url)'
      - name: revision
        value: '$(params.github-repo-revision)'
      - name: deleteExisting
        value: 'true'
    workspaces:
      - name: output
        workspace: source
  - name: build-from-source
    taskRef: 
      name: react-build
    runAfter: 
    - clone-sources
    workspaces:
      - name: output
        workspace: source
  - name: build-image
    taskRef: 
      name: buildah-to-registry
    params:
      - name: IMAGE
        value: '$(params.image-root)/$(params.is-name)'
      - name: CONTEXT
        value: '.'
      - name: TLSVERIFY
        value: 'false'
    workspaces:
      - name: source
        workspace: source
    runAfter: 
      - build-from-source
  - name: scan-image
    taskRef:
      name: scan-image-acs
    params:
      - name: IMAGE
        value: 'AUTOMATED'
      - name: ACS_CENTRAL
        value: '$(params.acs-scan-api)'
    runAfter:
      - build-image
  - name: rollout-latest-image
    taskRef: 
      name: openshift-client
      kind: ClusterTask
    params:
      - name: SCRIPT
        value: |
          set -x
          oc import-image --insecure=true $(params.is-name):latest --from=$(params.image-root)/$(params.is-name):$(params.github-repo-revision) --confirm
    runAfter:
      - scan-image
---
# Source: pipelines/templates/app-pipeline/pipelines/devsecops-rh.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  generation: 4
  name: devsecops-rh
  namespace: devsecops-ci
spec:
  finally:
  - name: create-promote-pull-request
    params:
    - name: GIT_REPOSITORY
      value: $(params.APP_GITOPS_GIT)
    - name: GIT_USERNAME
      value: $(params.GIT_USERNAME)
    - name: GIT_PASSWORD
      value: $(params.GIT_PASSWORD)
    - name: COPY_FROM_PATH
      value: $(params.FROM_PATH)
    - name: COPY_TO_PATH
      value: $(params.TO_PATH)
    taskRef:
      kind: Task
      name: create-promote-pull-request
    workspaces:
    - name: workspace
      workspace: workspace
  params:
  - default: http://gogs-cicd.apps.ocp1.openshift.fr/gogs/spring-petclinic
    description: The application git repository
    name: APP_SOURCE_GIT
    type: string
  - default: master
    description: The application git revision
    name: APP_SOURCE_REVISION
    type: string
  - default: http://gogs-cicd.apps.ocp1.openshift.fr/gogs/spring-petclinic-config
    description: The application manifests git repository
    name: APP_MANIFESTS_GIT
    type: string
  - default: latest
    description: The application image tag to build
    name: APP_IMAGE_TAG
    type: string
  - default: devsecops-dev
    description: The namespace for Stage environments
    name: DEV_NAMESPACE
    type: string
  - default: https://github.com/rcarrata/spring-petclinic-gatling
    description: The application test cases git repository
    name: APP_TESTS_GIT
    type: string
  - description: The GitOps repository
    name: APP_GITOPS_GIT
    type: string
  - description: Git username to update GitOps files
    name: GIT_USERNAME
    type: string
  - description: Git password to update GitOps files
    name: GIT_PASSWORD
    type: string
  - description: Copy FROM path
    name: FROM_PATH
    type: string
  - description: Copy TO path
    name: TO_PATH
    type: string
  tasks:
  - name: source-clone
    params:
    - name: url
      value: $(params.APP_SOURCE_GIT)
    - name: revision
      value: $(params.APP_SOURCE_REVISION)
    - name: depth
      value: "0"
    - name: subdirectory
      value: spring-petclinic
    - name: deleteExisting
      value: "true"
    taskRef:
      kind: ClusterTask
      name: git-clone
    workspaces:
    - name: output
      workspace: workspace
  - name: unit-tests
    params:
    - name: GOALS
      value:
      - package
      - -f
      - spring-petclinic
    runAfter:
    - crda-scan
    taskRef:
      kind: Task
      name: maven
    workspaces:
    - name: source
      workspace: workspace
    - name: maven-settings
      workspace: maven-settings
  - name: code-analysis
    params:
    - name: GOALS
      value:
      - install
      - sonar:sonar
      - -f
      - spring-petclinic
      - -Dsonar.host.url=http://sonarqube:9000
      - -Dsonar.userHome=/tmp/sonar
      - -DskipTests=true
    runAfter:
    - crda-scan
    taskRef:
      kind: Task
      name: maven
    workspaces:
    - name: source
      workspace: workspace
    - name: maven-settings
      workspace: maven-settings
  - name: dependency-report
    params:
    - name: SOURCE_DIR
      value: spring-petclinic
    runAfter:
    - crda-scan
    taskRef:
      kind: Task
      name: dependency-report
    workspaces:
    - name: source
      workspace: workspace
    - name: maven-settings
      workspace: maven-settings
  - name: release-app
    params:
    - name: GOALS
      value:
      - deploy
      - -f
      - spring-petclinic
      - -DskipTests=true
      - -DaltDeploymentRepository=nexus::default::http://nexus:8081/repository/maven-releases/
      - -DaltSnapshotDeploymentRepository=nexus::default::http://nexus:8081/repository/maven-snapshots/
    runAfter:
    - code-analysis
    - unit-tests
    - dependency-report
    taskRef:
      kind: Task
      name: maven
    workspaces:
    - name: source
      workspace: workspace
    - name: maven-settings
      workspace: maven-settings
  - name: build-image
    params:
    - name: TLSVERIFY
      value: "false"
    - name: MAVEN_MIRROR_URL
      value: http://nexus:8081/repository/maven-public/
    - name: PATH_CONTEXT
      value: spring-petclinic/target
    - name: IMAGE_NAME
      value: quay-quay-openshift-storage.apps.ocp1.openshift.fr/openshift_cicd/spring-petclinic
    - name: IMAGE_TAG
      value: $(params.APP_IMAGE_TAG)
    runAfter:
    - syft-sbom
    taskRef:
      kind: Task
      name: s2i-java-11
    workspaces:
    - name: source
      workspace: workspace
  - name: image-scan
    params:
    - name: image
      value: quay-quay-openshift-storage.apps.ocp1.openshift.fr/openshift_cicd/spring-petclinic
    - name: rox_api_token
      value: roxsecrets
    - name: rox_central_endpoint
      value: roxsecrets
    - name: output_format
      value: table
    - name: image_digest
      value: $(tasks.build-image.results.IMAGE_DIGEST)
    runAfter:
    - build-image
    taskRef:
      kind: ClusterTask
      name: rox-image-scan
  - name: image-check
    params:
    - name: image
      value: quay-quay-openshift-storage.apps.ocp1.openshift.fr/openshift_cicd/spring-petclinic
    - name: rox_api_token
      value: roxsecrets
    - name: rox_central_endpoint
      value: roxsecrets
    - name: image_digest
      value: $(tasks.build-image.results.IMAGE_DIGEST)
    runAfter:
    - build-image
    taskRef:
      kind: ClusterTask
      name: rox-image-check
  - name: deploy-check
    params:
    - name: GIT_REPOSITORY
      value: $(params.APP_MANIFESTS_GIT)
    - name: rox_api_token
      value: roxsecrets
    - name: rox_central_endpoint
      value: roxsecrets
    - name: file
      value: deployment.yaml
    - name: deployment_files_path
      value: app
    runAfter:
    - build-image
    taskRef:
      kind: ClusterTask
      name: rox-deployment-check
    workspaces:
    - name: workspace
      workspace: workspace
  - name: update-deployment
    params:
    - name: GIT_REPOSITORY
      value: $(params.APP_MANIFESTS_GIT)
    - name: GIT_USERNAME
      value: gogs
    - name: GIT_PASSWORD
      value: gogs
    - name: CURRENT_IMAGE
      value: quay.io/siamaksade/spring-petclinic:latest
    - name: NEW_IMAGE
      value: quay-quay-openshift-storage.apps.ocp1.openshift.fr/openshift_cicd/spring-petclinic
    - name: NEW_DIGEST
      value: $(tasks.build-image.results.IMAGE_DIGEST)
    - name: KUSTOMIZATION_PATH
      value: environments/dev
    runAfter:
    - image-scan
    - image-check
    - deploy-check
    taskRef:
      kind: Task
      name: git-update-deployment
    workspaces:
    - name: workspace
      workspace: workspace
  - name: wait-application
    params:
    - name: application-name
      value: dev-spring-petclinic
    runAfter:
    - update-deployment
    taskRef:
      kind: Task
      name: argocd-task-sync-and-wait
  - name: perf-tests-clone
    params:
    - name: url
      value: $(params.APP_TESTS_GIT)
    - name: subdirectory
      value: spring-petclinic-gatling
    - name: deleteExisting
      value: "true"
    runAfter:
    - wait-application
    taskRef:
      kind: ClusterTask
      name: git-clone
    workspaces:
    - name: output
      workspace: workspace
  - name: pentesting-test
    params:
    - name: APP_URL
      value: http://spring-petclinic.$(params.DEV_NAMESPACE).svc.cluster.local:8080
    runAfter:
    - perf-tests-clone
    taskRef:
      kind: Task
      name: zap-proxy
    workspaces:
    - name: workspace
      workspace: workspace
  - name: performance-test
    params:
    - name: APP_URL
      value: http://spring-petclinic.$(params.DEV_NAMESPACE).svc.cluster.local:8080
    runAfter:
    - perf-tests-clone
    taskRef:
      kind: Task
      name: gatling
    workspaces:
    - name: simulations
      subPath: spring-petclinic-gatling
      workspace: workspace
  - name: crda-scan
    params:
    - name: manifest
      value: pom.xml
    runAfter:
    - source-clone
    taskRef:
      kind: ClusterTask
      name: crda-scan
    workspaces:
    - name: source
      workspace: workspace
  - name: syft-sbom
    params:
    - name: APP_PATH
      value: $(workspaces.source.path)
    runAfter:
    - release-app
    taskRef:
      kind: Task
      name: syft-sbom
    workspaces:
    - name: source
      workspace: workspace
  workspaces:
  - name: workspace
  - name: maven-settings
---
# Source: pipelines/templates/app-pipeline/pipeline-runs/pipeline-run-with-scan.yaml
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  generateName: react-scan-pipelinerun
  namespace: AUTOMATED
spec:
  params: 
    - name: "github-repo-revision"
      value: "main"
    - name: "github-repo-url"
      value: AUTOMATED
    - name: "context-dir"
      value: "/"
    - name: "image-name"
      value: AUTOMATED
    - name: "is-name"
      value: "chat-client"
    - name: "acs-image"
      value: AUTOMATED
    - name: "acs-scan-api"
      value: "https://central-stackrox."
  pipelineRef:
    name: build-scan-and-deploy
  podTemplate:
      volumes:
        - name: varlibcontainers
          persistentVolumeClaim:
            claimName: containers-pvc
  serviceAccountName: pipeline
  workspaces:
    - name: source
      persistentVolumeClaim:
        claimName: pipeline-pvc
---
# Source: pipelines/templates/app-pipeline/pipeline-runs/pipeline-run-with-sign.yaml
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  generateName: cosign-pipelinerun
  namespace: AUTOMATED
spec:
  params: 
    - name: "github-repo-revision"
      value: "main"
    - name: "github-repo-url"
      value: AUTOMATED
    - name: "context-dir"
      value: "/"
    - name: "image-name"
      value: AUTOMATED
    - name: "is-name"
      value: "chat-client"
  pipelineRef:
    name: build-and-sign
  podTemplate:
      volumes:
        - name: varlibcontainers
          persistentVolumeClaim:
            claimName: containers-pvc
  serviceAccountName: pipeline
  workspaces:
    - name: source
      persistentVolumeClaim:
        claimName: pipeline-pvc
---
# Source: pipelines/templates/app-pipeline/pipeline-runs/pipeline-run.yaml
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  generateName: react-pipelinerun
  namespace: AUTOMATED
spec:
  params: 
    - name: "github-repo-revision"
      value: "main"
    - name: "github-repo-url"
      value: AUTOMATED
    - name: "context-dir"
      value: "/"
    - name: "image-name" 
      value: AUTOMATED
    - name: "is-name"
      value: "chat-client"
  pipelineRef:
    name: build-and-deploy
  podTemplate:
      volumes:
        - name: varlibcontainers
          persistentVolumeClaim:
            claimName: containers-pvc
  serviceAccountName: pipeline
  workspaces:
    - name: source
      persistentVolumeClaim:
        claimName: pipeline-pvc
---
# Source: pipelines/templates/app-pipeline/tasks/buildah-to-registry.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah-to-registry
  namespace: AUTOMATED
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: image-build
spec:
  description: >-
    Buildah task builds source into a container image and
    then pushes it to a container registry.
    Buildah Task builds source into a container image using Buildah 
    build tool. It uses Buildah's support for building from Dockerfiles,
    using its buildah bud command.This command executes the directives in the
    Dockerfile to assemble a container image, then pushes that image to a
    container registry.
  params:
  - name: IMAGE
    description: Reference of the image buildah will produce.
  - name: BUILDER_IMAGE
    description: The location of the buildah builder image.
    default: quay.io/buildah/stable:v1.26
  - name: STORAGE_DRIVER
    description: Set buildah storage driver
    default: vfs
  - name: DOCKERFILE
    description: Path to the Dockerfile to build.
    default: ./Dockerfile
  - name: CONTEXT
    description: Path to the directory to use as context.
    default: .
  - name: QUAY_SECRET
    type: string
    description: Name of the secret contain the Quay Enterprise secret.
    default: quay-pull-secret  
  - name: TLSVERIFY
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    default: "true"
  - name: FORMAT
    description: The format of the built container, oci or docker
    default: "oci"
  - name: BUILD_EXTRA_ARGS
    description: Extra parameters passed for the build command when building images.
    default: ""
  - name: PUSH_EXTRA_ARGS
    description: Extra parameters passed for the push command when pushing images.
    type: string
    default: ""
  workspaces:
  - name: source

  volumes:
  - emptyDir: {}
    name: varlibcontainers

  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built.
  - name: IMAGE_URL
    description: Name of the image just built.
 
  steps:
  - name: build
    image: $(params.BUILDER_IMAGE)
    workingDir: $(workspaces.source.path)
    script: |
      set -x
      buildah --storage-driver=$(params.STORAGE_DRIVER) bud \
        $(params.BUILD_EXTRA_ARGS) --format=$(params.FORMAT) \
        --tls-verify=$(params.TLSVERIFY) --no-cache \
        -f $(params.DOCKERFILE) -t $(params.IMAGE) $(params.CONTEXT)
    volumeMounts:
    - name: varlibcontainers
      mountPath: /var/lib/containers

  - name: push
    image: $(params.BUILDER_IMAGE)
    workingDir: $(workspaces.source.path)
    securityContext:
      privileged: false
    env:
    - name: QUAY_PUSH_SECRET
      valueFrom:
        secretKeyRef:
          name: $(params.QUAY_SECRET)
          key: .dockerconfigjson
    script: |
      fuse-overlayfs --version
      echo $QUAY_PUSH_SECRET
      echo $QUAY_PUSH_SECRET > auth.json
      buildah --storage-driver=$(params.STORAGE_DRIVER) push --authfile auth.json \
        $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
        --digestfile $(workspaces.source.path)/image-digest $(params.IMAGE) \
        docker://$(params.IMAGE)
    volumeMounts:
    - name: varlibcontainers
      mountPath: /var/lib/containers

  - name: digest-to-results
    image: $(params.BUILDER_IMAGE)
    script: cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST

  - name: name-to-results
    image: $(params.BUILDER_IMAGE)
    script: echo $(params.IMAGE) | tee /tekton/results/IMAGE_URL
---
# Source: pipelines/templates/app-pipeline/tasks/install-without-buildah.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: react-build
spec:
  workspaces:
    - name: output
  params:
    - name: TLSVERIFY
      type: string
      default: 'true'
    - name: IMAGE
      type: string
      default: 'AUTOMATED'
    - name: DOCKERFILE
      type: string
      default: ./Dockerfile
    - name: CONTEXT
      type: string
      default: .
  steps:
  - name: install
    # ipbabble TBD change
    image: 
    command:
    - /usr/bin/npm
    args:
    - install
    workingDir: $(workspaces.output.path)
  - name: build
    # ipbabble TBD change
    image: 
    command:
    - /usr/bin/npm
    args:
    - run-script
    - build
    workingDir: $(workspaces.output.path)
---
# Source: pipelines/templates/app-pipeline/tasks/scan-image.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: scan-image-acs
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: scan-image
spec:
  description: >-
    Uses the Red Hat Advanced Cluster Security APIs to scan 
    a container image against the current build policies for the cluster.
  params:
  - name: IMAGE
    description: Reference of the image to scan
  - name: SCAN_IMAGE
    description: Image containing the roxctl CLI
    default: $(params.acs-image)
  - name: TLS_VERIFY
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    default: "true"
  - name: acs-image
    description: roxctl image URL on RH registry (free/no auth)
    default: AUTOMATED
  - name: ACS_CENTRAL
    description: The end-point for the ACS API
    default: $(params.acs-scan-api)

  steps:
  - name: scan
    image: $(params.SCAN_IMAGE)
    env:
      - name: ROX_API_TOKEN
        valueFrom:
          secretKeyRef:
            name: acs-api-token
            key: token
    script: |
      set -x
      /usr/bin/roxctl --insecure-skip-tls-verify=$(params.TLS_VERIFY) -e $(params.ACS_CENTRAL):443 image check --image=$(params.IMAGE)
---
# Source: pipelines/templates/chains/tekton-chain.yaml
apiVersion: operator.tekton.dev/v1alpha1
kind: TektonChain
metadata:
  name: chain
spec:
  targetNamespace: openshift-pipelines
